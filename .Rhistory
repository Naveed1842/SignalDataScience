temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
binaryList = df(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
View(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
print(c("count", count))
}
binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = data.frame()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
print(c("count", count))
}
#binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
col = "cyl"
levels(df[,col])
names(df)
naems(factormt)
names(factormt)
col = 2
temp_vector = c()
check_col = as.numeric(df[,col])
df = factormt
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
namesv = c()
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
levels(df[,col])
temp_vector = check_col == lev
lev = 4
lev = "4"
temp_vector = check_col == lev
temp_vector
check_col
lev = 1
temp_vector = check_col == lev
temp_vector
print(c("count", count))
binaryList = cbind(binaryList, temp_vector)
print(c("count", count))
print(summary(binaryList))
namesv=c()
count=0
binaryList = data.frame()
col_numb = length(colnames(df))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
namesv=c()
count=0
binaryList = data.frame()
col_numb = length(colnames(df))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
binaryList = data.frame()
namesv=c()
count=0
binaryList = data.frame()
binaryList[1:nrow(df),] = 0
col_numb = length(colnames(df))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
list[[col]] =
3
binaryList = cbind(binaryList, temp_vector)
binaryList
binary_indicator = function(df){
namesv=c()
count=0
binaryList = data.frame()
binaryList[1:nrow(df),] = 0
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
print(c("count", count))
}
#binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
source('~/Documents/Dropbox/Stats Programming/Signal Data Science Nathan/week2 day2 resampling.R', echo=TRUE)
start = proc.time()
# Permutation generation (naive) solution
perm_naive = function(n) {
if (n == 1) {
return(list(1))
}
smaller = perm_naive(n-1)
perms = vector("list", length(smaller) * n)
pos = 0
for (i in 1:length(smaller)) {
old = smaller[[i]]
for (j in 1:(n-1)) {
pos = pos + 1
if (j < (n-1)) {
perms[[pos]] = c(old[1:j], n, old[(j+1):(n-1)])
} else {
perms[[pos]] = c(old, n)
}
pos = pos + 1
perms[[pos]] = c(n, old)
}
unique(perms)
}
perm_naive(4)
done = proc.time() - start
print(done)
perm_naive(8)
done = proc.time() - start
print(done)
scrape_zillow = read.csv("/Users/nathanhelm-burger/herokufolder/flask\ tutorial/scrape_zillow.csv")
df = scrape_zillow
dim(df)
changetoNA <- function(colnum,df) {
col <- df[,colnum]
if (is.numeric(col)) {  #edit: verifying column is numeric
col[col < 0 & is.numeric(col)] <- NA
}
return(col)
}
df <- data.frame(sapply(1:5, changetoNA, df))
df = cbind(df, scrape_zillow$url)
names(df) = names(scrape_zillow)
df$ppft[df$ppft>500000] = NA
boxplot(df$ppft)
summary(df)
View(df)
str(join1_df)[1:15]
join1_df = read.csv("join1.csv", stringsAsFactors = FALSE)
str(join1_df)[1:15]
str(demg1)
demg1 = read.csv(paste0(demg_path, "county_wide_demographic.csv"))
colnames(demg1)
colnames(demg1)[1] = "County"
demg1['STATE'] = NULL
demg1["YEAR"] = NULL
demg1['COUNTY'] = NULL
demg_path = "/Users/nathanhelm-burger/Documents/Dropbox/datadive_wagetheft/data/census/"
demg1 = read.csv(paste0(demg_path, "county_wide_demographic.csv"))
colnames(demg1)
colnames(demg1)[1] = "County"
demg1['STATE'] = NULL
demg1["YEAR"] = NULL
demg1['COUNTY'] = NULL
head(demg1)
dim(demg1)
str(demg1)
demg1 = read.csv(paste0(demg_path, "county_wide_demographic.csv"), stringsAsFactors = FALSE)
colnames(demg1)
colnames(demg1)[1] = "County"
demg1['STATE'] = NULL
demg1["YEAR"] = NULL
demg1['COUNTY'] = NULL
head(demg1)
join2_df = left_join(join1_df, demg1, by = c("county" = "county"))
library("dplyr")
join2_df = left_join(join1_df, demg1, by = c("county" = "county"))
colnames(join1_df)
join2_df = left_join(join1_df, demg1, by = c("county"))
colnames(demg1)[1] = "county"
join2_df = left_join(join1_df, demg1, by = c("county"))
dim(join2_df)
dim(join1_df)
setdiff(industry_demg$st_cd, df$st_cd)
violations_path = "/Users/nathanhelm-burger/Documents/Dropbox/datadive_wagetheft/data/processedWhdData/"
write.csv(join2_df, paste0(violations_path, "whd_demographic_industry_violations_naicNumericLevels.csv"))
full_df = read.csv(paste0(violations_path, "whd_demographic_industry_violations_naicNumericLevels.csv"))
violations_path = "/Users/nathanhelm-burger/Documents/Dropbox/datadive_wagetheft/data/processedWhdData/"
full_df = read.csv(paste0(violations_path, "whd_demographic_industry_violations_naicNumericLevels.csv"))
name_options = colnames(full_df)
name_options
chosen_cols = name_options[c(21, 112, 118:121, 137:206)]
chosen_cols
full_df$X = NULL
name_options = colnames(full_df)
name_options
head(full_df[123])
head(full_df[123],60)
head(full_df[c("county",123)],60)
head(full_df[c("county","state_county_FIPS")],60)
head(full_df[c("county","state_county_FIPS")],90)
chosen_cols
name_options
chosen_cols = name_options[c(23, 2, 123, 126:205)]
chosen_cols
min_wage_pred_df = full_df[chosen_cols]
dim(min_wage_pred_df)
write.csv(min_wage_pred_df, "min_wage_pred_df.csv", row.names = FALSE)
uhoh = full_df[full_df$flsa_mw_bw_atp_amt == 4351.10,]
head(uhoh[0:14])
head(uhoh)
min_wage_pred_df = min_wage_pred_df[min_wage_pred_df$flsa_mw_bw_atp_amt != 0,]
uhoh = min_wage_pred_df[min_wage_pred_df$flsa_mw_bw_atp_amt == 4351.10,]
head(uhoh)
head(min_wage_pred_df[1])
uhoh
uhoh = min_wage_pred_df[min_wage_pred_df['flsa_mw_bw_atp_amt'] == 4351.10,]
uhoh
na.omit(uhoh)
dim(uhoh)
uhoh = na.omit(uhoh)
dim(uhoh)
min_wage_ranger = ranger(dependent.variable.name = "flsa_mw_bw_atp_amt", data = min_wage_pred_df)
write.csv(min_wage_pred_df, "min_wage_pred_df.csv", row.names = FALSE)
min_wage_pred_df = read.csv("min_wage_pred_df.csv", stringsAsFactors = FALSE)
dim(min_wage_pred_df)
min_wage_pred_df = na.omit(min_wage_pred_df)
dim(min_wage_pred_df)
min_wage_pred_df = read.csv("min_wage_pred_df.csv", stringsAsFactors = FALSE)
dim(min_wage_pred_df)
min_wage_pred_df = na.omit(!(is.na(min_wage_pred_df$flsa_mw_bw_atp_amt) | is.na(min_wage_pred_df$naic_cd_lvl2) | is.na(min_wage_pred_df$state_county_FIPS)))
dim(min_wage_pred_df)
min_wage_pred_df = read.csv("min_wage_pred_df.csv", stringsAsFactors = FALSE)
dim(min_wage_pred_df)
min_wage_pred_df = na.omit(!(is.na(min_wage_pred_df$flsa_mw_bw_atp_amt)))
dim(min_wage_pred_df)
min_wage_pred_df = read.csv("min_wage_pred_df.csv", stringsAsFactors = FALSE)
dim(min_wage_pred_df)
min_wage_pred_df = min_wage_pred_df[!(is.na(min_wage_pred_df$flsa_mw_bw_atp_amt))]
dim(min_wage_pred_df)
min_wage_pred_df = min_wage_pred_df[!(is.na(min_wage_pred_df$flsa_mw_bw_atp_amt)),]
dim(min_wage_pred_df)
min_wage_pred_df = min_wage_pred_df[min_wage_pred_df$flsa_mw_bw_atp_amt != 0,]
dim(min_wage_pred_df)
summary(min_wage_pred_df)
min_wage_pred_df = min_wage_pred_df[!(is.na(min_wage_pred_df$TOT_POP)),]
dim(min_wage_pred_df)
min_wage_ranger = ranger(dependent.variable.name = "flsa_mw_bw_atp_amt", data = min_wage_pred_df)
library('ranger')
min_wage_ranger = ranger(dependent.variable.name = "flsa_mw_bw_atp_amt", data = min_wage_pred_df)
rmse = min_wage_model$results$RMSE
model_pred = predict(min_wage_ranger, min_wage_pred_df)
rmse = min_wage_ranger$results$RMSE
rmse
str(min_wage_ranger)
min_wage_ranger$prediction.error
pred_df = cbind(min_wage_pred_df$flsa_mw_bw_atp_amt, min_wage_ranger$predictions)
head(pred_df, 40)
pred_df = cbind(actual = min_wage_pred_df$flsa_mw_bw_atp_amt, predicted = min_wage_ranger$predictions)
head(pred_df, 40)
violations_path = "/Users/nathanhelm-burger/Documents/Dropbox/datadive_wagetheft/data/processedWhdData/"
full_df = read.csv(paste0(violations_path, "whd_demographic_industry_violations_naicNumericLevels.csv"), stringsAsFactors = FALSE)
head(full_df$zip_cd)
pred_df = cbind(pred_df, full_df$county)
pred_df = cbind(pred_df, min_wage_pred_df$county)
gpred_df = grouped_df(pred_df, county)
gpred_df = grouped_df(pred_df, pred_df$county)
gpred_df = grouped_df(pred_df, pred_df['county'])
pred_df
gpred_df
gpred_df = grouped_df(pred_df, pred_df['county'])
pred_df = data.frame(cbind(pred_df, min_wage_pred_df$county))
gpred_df = grouped_df(pred_df, pred_df['county'])
pred_df = data.frame(cbind(pred_df, county = min_wage_pred_df$county))
pred_df = cbind(actual = min_wage_pred_df$flsa_mw_bw_atp_amt, predicted = min_wage_ranger$predictions)
pred_df = data.frame(cbind(pred_df, county = min_wage_pred_df$county))
gpred_df = grouped_df(pred_df, pred_df['county'])
pred_df = data.frame(cbind(pred_df, county = min_wage_pred_df$county))
pred_df = cbind(actual = min_wage_pred_df$flsa_mw_bw_atp_amt, predicted = min_wage_ranger$predictions)
pred_df = data.frame(cbind(pred_df, county = min_wage_pred_df$county))
gpred_df = grouped_df(pred_df, pred_df['county'])
pred_df = cbind(pred_df, county = min_wage_pred_df$county))
pred_df = cbind(pred_df, county = min_wage_pred_df$county)
pred_df = cbind(actual = min_wage_pred_df$flsa_mw_bw_atp_amt, predicted = min_wage_ranger$predictions)
pred_df = data.frame(pred_df)
pred_df = cbind(pred_df, county = min_wage_pred_df$county)
pred_df = cbind(pred_df, min_wage_pred_df$county)
pred_df = cbind(actual = min_wage_pred_df$flsa_mw_bw_atp_amt, predicted = min_wage_ranger$predictions)
pred_df = data.frame(pred_df)
pred_df = cbind(pred_df, min_wage_pred_df$county)
pred_df = cbind(actual = min_wage_pred_df$flsa_mw_bw_atp_amt, predicted = min_wage_ranger$predictions)
pred_df = data.frame(pred_df)
pred_df = cbind(pred_df, min_wage_pred_df$county)
pred_df = cbind(pred_df, min_wage_pred_df$state_county_FIPS)
gpred_df = grouped_df(pred_df, pred_df['county'])
gpred_df = grouped_df(pred_df, pred_df[3])
colnames(pred_df)[3] = area
gpred_df = grouped_df(pred_df, pred_df['area'])
gpred_df = grouped_df(pred_df, 'area')
pred_df
colnames(pred_df)[3] = area
colnames(pred_df)[3] = 'area'
gpred_df = grouped_df(pred_df, 'area')
gpred_df = grouped_df(pred_df, c('area'))
gpred_df = grouped_df(pred_df, list('area'))
?group_by
gpred_df = group_df(pred_df, 'area')
gpred_df = group_by(pred_df, 'area')
gpred_df
table(gpred_df)
pred_df$error = pred_df$predicted - pred_df$actual
gpred_df = group_by(pred_df, 'area')
summarise(gpred_df, n = n(), mean=mean('err'))
summarise(gpred_df, n = n(), mean=mean('error'))
summarise(gpred_df, n = n(), mean=mean())
summarise(gpred_df, n = n(), mean=mean(error))
gpred_df = group_by(pred_df, area)
summarise(gpred_df, n = n(), mean=mean(error))
sum_df = summarise(gpred_df, n = n(), meanErr=mean(error))
View(sum_df)
sum_df_join = left_join(sum_df, min_wage_pred_df, by = c("area" = "state_county_FIPS"))
View(sum_df_join)
dim(sum_df_join)
sum_df_join = left_join(min_wage_pred_df, sum_df, by = c("area" = "state_county_FIPS"))
dim(sum_df_join)
sum_df_join = left_join(min_wage_pred_df, sum_df, by = c("state_county_FIPS" = "area"))
dim(sum_df_join)
sum_df_join = left_inner_join(min_wage_pred_df, sum_df, by = c("state_county_FIPS" = "area"))
?left_join
sum_df_join = left_inner_join(y = min_wage_pred_df, x = sum_df, by = c("state_county_FIPS" = "area"))
sum_df_join = left_join(y = min_wage_pred_df, x = sum_df, by = c("state_county_FIPS" = "area"))
sum_df_join = semi_join(x = sum_df, y = min_wage_pred_df, by = c("area" = "state_county_FIPS"))
dim(sum_df_join)
dim(sum_df)
dim(gpred_df)
county_names = full_df['state_county_FIPS', 'county']
sum_df_join = semi_join(x = sum_df, y = county_names, by = c("area" = "state_county_FIPS"))
sum_df_join = semi_join(x = sum_df, y = county_names, by = c("area" = "state_county_FIPS"), copy=TRUE)
colnames(county_names)
county_names = full_df[c('state_county_FIPS', 'county')]
colnames(county_names)
sum_df_join = semi_join(x = sum_df, y = county_names, by = c("area" = "state_county_FIPS"), copy=TRUE)
sum_df_join
View(sum_df_join)
sum_df_join = left_join(x = sum_df, y = county_names, by = c("area" = "state_county_FIPS"), copy=TRUE)
View(sum_df_join)
?data.frame
# Nathan's Coin Question
# Two different biased coins, one normal and the other with a hidden third side
# Case 1:
case_1 = function(flips, p_bias){
results = c(rep(-100, flips))
flip_probs = runif(flips)
for(i in 1:flips){
if(flip_probs[i] < 0.5 + p_bias){
results[i] = rnorm(1, mean = 0, sd = 1)
} else {
results[i] = rnorm(1, mean = 1, sd = 1)
}
return(results)
}
# Case 2:
case_2 = function(flips, p_bias, p_third_side){
results = c(rep(-100, flips))
for(i in 1:flips){
if(flip_probs[i] < 0.5 - (p_third_side / 2) + p_bias){
# heads
results[i] = rnorm(1, mean = 0, sd = 1)
} else if (flip_probs[i] > 0.5 + (p_third_side / 2) - p_bias){
# tails
results[i] = rnorm(1, mean = 1, sd = 1)
} else {
# side
results[i] = rnorm(1, mean = 0.5, sd = 1)
}
return(results)
}
flips = 5000
coinA = case_1(flips, 0.01)
coinB = case_2(flips, 0.01, 0.02)
coinC = case_2(flips, 0.05, 0.02)
coinD = case_1(flips, 0.05)
?data.frame
coin_df = data.frame(coinA, coinB, coinC, coinD)
# Nathan's Coin Question
# Two different biased coins, one normal and the other with a hidden third side
# Case 1:
case_1 = function(flips, p_bias){
results = c(rep(-100, flips))
flip_probs = runif(flips)
for(i in 1:flips){
if(flip_probs[i] < 0.5 + p_bias){
results[i] = rnorm(1, mean = 0, sd = 1)
} else {
results[i] = rnorm(1, mean = 1, sd = 1)
}
return(results)
}
# Case 2:
case_2 = function(flips, p_bias, p_third_side){
results = c(rep(-100, flips))
flip_probs = runif(flips)
for(i in 1:flips){
if(flip_probs[i] < 0.5 - (p_third_side / 2) + p_bias){
# heads
results[i] = rnorm(1, mean = 0, sd = 1)
} else if (flip_probs[i] > 0.5 + (p_third_side / 2) - p_bias){
# tails
results[i] = rnorm(1, mean = 1, sd = 1)
} else {
# side
results[i] = rnorm(1, mean = 0.5, sd = 1)
}
return(results)
}
flips = 5000
coinA = case_1(flips, 0.01)
coinB = case_2(flips, 0.01, 0.02)
coinC = case_2(flips, 0.05, 0.02)
coinD = case_1(flips, 0.05)
?data.frame
coin_df = data.frame(coinA, coinB, coinC, coinD)
summary(coin_df)
write.csv(coin_df, "coin_question.csv")
setwd("~/Documents/Stats/Signal Data Science Nathan")
write.csv(coin_df, "coin_question.csv")
